// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package assets generated by go-bindata.// sources:
// conf/config.yaml
// locales/errors_en.json
// locales/errors_tw.json
// locales/errors_zh.json
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x41\x4e\xc4\x30\x0c\x45\xf7\x39\x85\x57\xd3\x55\x47\x45\x95\x06\xb0\xd4\x1b\xb0\x9c\x3d\x72\x13\x77\x88\x48\xe2\x60\xb7\x02\x6e\x8f\x52\x21\x44\x61\x67\x3d\xfd\x6f\xfd\x97\x3f\xed\x2d\xa1\x03\xd8\x8c\xb5\x50\x66\x84\x4e\x45\xd6\xce\x01\x54\x32\x7b\x17\x0d\xbf\x10\x85\xa0\x6c\x86\xd0\xed\xc5\xf3\x4c\x16\xfd\x33\xd5\x7a\x0e\xe2\x5f\x59\x71\x1c\x87\x4b\x0b\x06\x5a\x69\x26\x6b\xef\x7e\x32\x8d\x7b\x29\x4b\xbc\x21\x74\xfe\x85\xd4\x78\x9d\xb6\x75\x79\x38\xd5\x76\x5f\x63\xe6\xe9\xaa\x1b\x9f\x92\xf8\xe9\x49\x3c\xa5\xd6\xc8\xf4\xd1\xc7\x90\xb8\xf7\x52\x8a\x21\xdc\x0d\xdf\x50\x2a\x97\x03\x4c\x72\xeb\xb3\x04\x46\x58\x28\x19\x3b\xa7\x1c\xa2\xe1\x61\xf6\x8e\xfe\xcf\xbe\x8c\xf7\x8f\x7f\x94\x77\x8b\x19\x61\x70\x5f\x01\x00\x00\xff\xff\xae\x22\xd0\x97\x24\x01\x00\x00")

func confConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_confConfigYaml,
		"conf/config.yaml",
	)
}

func confConfigYaml() (*asset, error) {
	bytes, err := confConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/config.yaml", size: 292, mode: os.FileMode(420), modTime: time.Unix(1597383060, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesErrors_enJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\x3d\x0e\xc2\x30\x0c\xc5\xf1\xbd\xa7\x78\xca\xd2\x85\xa1\x85\xad\x97\xb1\xac\xca\x88\x48\xf9\xc2\x0e\x43\x85\xb8\x3b\x4a\x02\x52\xd7\xbf\xdf\xcf\xef\x09\x70\xeb\xb2\xac\x94\x32\x3d\x5f\xa2\x07\x15\x56\x8e\x6e\x83\x2b\x41\xd8\x04\x85\xcd\x50\x1f\x82\xc4\x51\x36\xcc\x7d\x35\x63\xcc\x2e\x3f\x7f\x1d\x8c\x7c\xda\x73\x2c\x41\xaa\xb4\x0f\x4d\xf5\x0e\x6f\x38\x9d\xfe\xea\x46\xbb\x0a\x57\xa1\x3b\xfb\xd0\x80\x65\xd5\x03\x23\xa2\xc7\xe9\xf3\x0d\x00\x00\xff\xff\xad\xe8\x5c\x7f\xa3\x00\x00\x00")

func localesErrors_enJsonBytes() ([]byte, error) {
	return bindataRead(
		_localesErrors_enJson,
		"locales/errors_en.json",
	)
}

func localesErrors_enJson() (*asset, error) {
	bytes, err := localesErrors_enJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/errors_en.json", size: 163, mode: os.FileMode(420), modTime: time.Unix(1597372534, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesErrors_twJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x32\x34\x30\x30\x8c\xcf\xcb\x8f\x2f\x2c\x4d\x2d\xaa\x8c\x2f\x48\x2c\x4a\xcc\x55\xb2\x52\x50\x7a\xb1\xba\xfb\x69\xd3\xe6\x97\x8d\x53\x9e\xcd\x5f\xfa\x62\xfd\xa2\xa7\xfd\xcd\xcf\xa6\xee\x50\xd2\x81\xea\x30\x82\x28\x8c\xcf\xcc\x4b\xce\xcf\x2d\xc8\x49\x2d\x49\x45\xe8\x79\xb1\x67\xc7\xd3\x09\x1d\xcf\x36\x4f\x7d\x3e\xab\x05\x4d\x9b\x71\x7c\x72\x51\x6a\x62\x49\x6a\x7c\x5a\x62\x66\x0e\x48\xc7\xd3\xce\xad\xcf\x57\x77\x3f\x5d\xb2\xf1\xd9\xd4\xe9\x4a\x5c\xb5\x80\x00\x00\x00\xff\xff\x2f\x85\xf9\xb4\x91\x00\x00\x00")

func localesErrors_twJsonBytes() ([]byte, error) {
	return bindataRead(
		_localesErrors_twJson,
		"locales/errors_tw.json",
	)
}

func localesErrors_twJson() (*asset, error) {
	bytes, err := localesErrors_twJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/errors_tw.json", size: 145, mode: os.FileMode(420), modTime: time.Unix(1597372537, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesErrors_zhJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x32\x34\x30\x30\x8c\xcf\xcb\x8f\x2f\x2c\x4d\x2d\xaa\x8c\x2f\x48\x2c\x4a\xcc\x55\xb2\x52\x50\x7a\xb6\x69\xe1\xb3\x39\x9d\x4f\xf6\x2c\x78\xd9\x30\x29\x10\x24\xf5\xb4\xbf\xe9\xd9\xd4\x0d\xce\x19\x99\x79\x89\x1e\x2e\x5e\x4a\x3a\x50\xbd\x46\x10\x2d\xf1\x99\x79\xc9\xf9\xb9\x05\x39\xa9\x25\xa9\x20\xdd\x10\x7d\xcf\x67\xb5\x40\x74\x3d\xd9\xd1\xfb\x74\x5d\xcf\xb3\xa9\x5b\xe0\xda\x8c\xe3\x93\x8b\x52\x13\x4b\x52\xe3\xd3\x12\x33\x73\x40\x3a\x9e\x76\xcc\x7e\xba\x7b\xd7\xd3\x25\x1b\x5f\x6c\x59\xaa\xc4\x55\x0b\x08\x00\x00\xff\xff\x0c\x86\x8d\x86\x9b\x00\x00\x00")

func localesErrors_zhJsonBytes() ([]byte, error) {
	return bindataRead(
		_localesErrors_zhJson,
		"locales/errors_zh.json",
	)
}

func localesErrors_zhJson() (*asset, error) {
	bytes, err := localesErrors_zhJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/errors_zh.json", size: 155, mode: os.FileMode(420), modTime: time.Unix(1597382278, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/config.yaml":       confConfigYaml,
	"locales/errors_en.json": localesErrors_enJson,
	"locales/errors_tw.json": localesErrors_twJson,
	"locales/errors_zh.json": localesErrors_zhJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"config.yaml": &bintree{confConfigYaml, map[string]*bintree{}},
	}},
	"locales": &bintree{nil, map[string]*bintree{
		"errors_en.json": &bintree{localesErrors_enJson, map[string]*bintree{}},
		"errors_tw.json": &bintree{localesErrors_twJson, map[string]*bintree{}},
		"errors_zh.json": &bintree{localesErrors_zhJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
